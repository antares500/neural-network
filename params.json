{"name":"Neural-network","tagline":"A multi-layer neural network in PHP. Features momentum learning, custom activation functions, and detection & prevention of over-fitting your data.","body":"<html>\r\n<head>\r\n<title>Docs For Class NeuralNetwork</title>\r\n<style type='text/css'>\r\n.php {\r\n  padding: 1em;\r\n}\r\n.php-src { font-family: 'Courier New', Courier, monospace; font-weight: normal; }\r\n\r\nbody\r\n{\r\n  color:              #000000;\r\n  background-color:   #ffffff;\r\n  background-repeat:  repeat-y;\r\n  font-family:        tahoma, verdana, arial, sans-serif;\r\n  font-size:          10pt;\r\n}\r\n\r\na\r\n{\r\n  color:              #000099;\r\n  background-color:   transparent;\r\n  text-decoration:    none;\r\n}\r\n\r\na:hover\r\n{\r\n  text-decoration:    underline;\r\n}\r\n\r\na.menu\r\n{\r\n  color:              #ffffff;\r\n  background-color:   transparent;\r\n}\r\n\r\ntd\r\n{\r\n  font-size:          10pt;\r\n}\r\n\r\ntd.header_top\r\n{\r\n  color:              #ffffff;\r\n  background-color:   #9999cc;\r\n  font-size:          16pt;\r\n  font-weight:        bold;\r\n  text-align:         right;\r\n  padding:            10px;\r\n}\r\n\r\ntd.header_line\r\n{\r\n  color:              #ffffff;\r\n  background-color:   #333366;\r\n}\r\n\r\ntd.header_menu\r\n{\r\n  color:              #ffffff;\r\n  background-color:   #666699;\r\n  font-size:          8pt;\r\n  text-align:         right;\r\n  padding:            2px;\r\n  padding-right:      5px;\r\n}\r\n\r\ntd.menu\r\n{\r\n  padding:            2px;\r\n  padding-left:       5px;\r\n}\r\n\r\ntd.code_border\r\n{\r\n  color:              #000000;\r\n  background-color:   #c0c0c0;\r\n}\r\n\r\ntd.code\r\n{\r\n  color:              #000000;\r\n  background-color:   #f0f0f0;\r\n}\r\n\r\ntd.type\r\n{\r\n  font-style:         italic;\r\n}\r\n\r\ndiv.credit\r\n{\r\n  font-size:          8pt;\r\n  text-align:         center;\r\n}\r\n\r\ndiv.package\r\n{\r\n  padding-left:       5px;\r\n}\r\n\r\ndiv.tags\r\n{\r\n  padding-left:       15px;\r\n}\r\n\r\ndiv.function\r\n{\r\n  padding-left:       15px;\r\n}\r\n\r\ndiv.top\r\n{\r\n  font-size:          8pt;\r\n}\r\n\r\ndiv.warning\r\n{\r\n  color:              #ff0000;\r\n  background-color:   transparent;\r\n}\r\n\r\ndiv.description\r\n{\r\n  padding-left:       15px;\r\n}\r\n\r\nhr\r\n{\r\n  height:             1px;\r\n  border-style:       solid;\r\n  border-color:       #c0c0c0;\r\n  margin-top:         10px;\r\n  margin-bottom:      10px;\r\n}\r\n\r\nspan.smalllinenumber\r\n{\r\n  font-size:          8pt;\r\n}\r\n\r\nul {\r\n  margin-left:    0px;\r\n  padding-left:   8px;\r\n}\r\n/* Syntax highlighting */\r\n\r\n.src-code { background-color: #f5f5f5; border: 1px solid #ccc9a4; padding: 0px; margin : 0px;\r\n            font-family: 'Courier New', Courier, monospace; font-weight: normal; }\r\n.src-line {  font-family: 'Courier New', Courier, monospace; font-weight: normal; }\r\n\r\n.src-comm { color: green; }\r\n.src-id {  }\r\n.src-inc { color: #0000FF; }\r\n.src-key { color: #0000FF; }\r\n.src-num { color: #CC0000; }\r\n.src-str { color: #66cccc; }\r\n.src-sym { font-weight: bold; }\r\n.src-var { }\r\n\r\n.src-php { font-weight: bold; }\r\n\r\n.src-doc { color: #009999 }\r\n.src-doc-close-template { color: #0000FF }\r\n.src-doc-coretag { color: #0099FF; font-weight: bold }\r\n.src-doc-inlinetag { color: #0099FF }\r\n.src-doc-internal { color: #6699cc }\r\n.src-doc-tag { color: #0080CC }\r\n.src-doc-template { color: #0000FF }\r\n.src-doc-type { font-style: italic }\r\n.src-doc-var { font-style: italic }\r\n\r\n.tute-tag { color: #009999 }\r\n.tute-attribute-name { color: #0000FF }\r\n.tute-attribute-value { color: #0099FF }\r\n.tute-entity { font-weight: bold; }\r\n.tute-comment { font-style: italic }\r\n.tute-inline-tag { color: #636311; font-weight: bold }\r\n\r\n/* tutorial */\r\n\r\n.authors {  }\r\n.author { font-style: italic; font-weight: bold }\r\n.author-blurb { margin: .5em 0em .5em 2em; font-size: 85%; font-weight: normal; font-style: normal }\r\n.example { border: 1px dashed #999999; background-color: #EEEEEE; padding: .5em; }\r\n.listing { border: 1px dashed #999999; background-color: #EEEEEE; padding: .5em; white-space: nowrap; }\r\n.release-info { font-size: 85%; font-style: italic; margin: 1em 0em }\r\n.ref-title-box {  }\r\n.ref-title {  }\r\n.ref-purpose { font-style: italic; color: #666666 }\r\n.ref-synopsis {  }\r\n.title { font-weight: bold; margin: 1em 0em 0em 0em; padding: .25em; border: 2px solid #999999; background-color: #9999CC  }\r\n.cmd-synopsis { margin: 1em 0em }\r\n.cmd-title { font-weight: bold }\r\n.toc { margin-left: 2em; padding-left: 0em }\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h1>Class: NeuralNetwork</h1>\r\n\r\n\r\n<table width=\"100%\" border=\"0\">\r\n<tr><td valign=\"top\">\r\n\r\n<h3><a href=\"#class_details\">Class Overview</a></h3>\r\n<pre></pre><br />\r\n<div class=\"description\"><strong>Multi-layer Neural Network in PHP</strong></div><br /><br />\r\n<h4>Author(s):</h4>\r\n<ul>\r\n                      <li>E. Akerboom</li>\r\n              <li><a href=\"http://www.tremani.nl/\">Tremani</a>, <a href=\"http://maps.google.com/maps?f=q&hl=en&q=delft%2C+the+netherlands&ie=UTF8&t=k&om=1&ll=53.014783%2C4.921875&spn=36.882665%2C110.566406&z=4\">Delft</a>, The Netherlands</li>\r\n      </ul>\r\n\r\n\r\n\r\n\r\n    \r\n                \r\n<h4>Version:</h4>\r\n<ul>\r\n  <li>1.0</li>\r\n</ul>\r\n\r\n        \r\n</td>\r\n\r\n\r\n\r\n<td valign=\"top\">\r\n<h3><a href=\"#class_methods\">Methods</a></h3>\r\n<ul>\r\n    <li><a href=\"#methodNeuralNetwork\">NeuralNetwork</a></li>\r\n    <li><a href=\"#methodactivation\">activation</a></li>\r\n    <li><a href=\"#methodaddControlData\">addControlData</a></li>\r\n    <li><a href=\"#methodaddTestData\">addTestData</a></li>\r\n    <li><a href=\"#methodcalculate\">calculate</a></li>\r\n    <li><a href=\"#methodderivative_activation\">derivative_activation</a></li>\r\n    <li><a href=\"#methodgetControlDataIDs\">getControlDataIDs</a></li>\r\n    <li><a href=\"#methodgetLearningRate\">getLearningRate</a></li>\r\n    <li><a href=\"#methodgetMomentum\">getMomentum</a></li>\r\n    <li><a href=\"#methodgetRandomWeight\">getRandomWeight</a></li>\r\n    <li><a href=\"#methodgetTestDataIDs\">getTestDataIDs</a></li>\r\n    <li><a href=\"#methodisVerbose\">isVerbose</a></li>\r\n    <li><a href=\"#methodload\">load</a></li>\r\n    <li><a href=\"#methodsave\">save</a></li>\r\n    <li><a href=\"#methodsetLearningRate\">setLearningRate</a></li>\r\n    <li><a href=\"#methodsetMomentum\">setMomentum</a></li>\r\n    <li><a href=\"#methodsetVerbose\">setVerbose</a></li>\r\n    <li><a href=\"#methodshowWeights\">showWeights</a></li>\r\n    <li><a href=\"#methodtrain\">train</a></li>\r\n  </ul>\r\n</td>\r\n\r\n</tr></table>\r\n<hr />\r\n\r\n<table width=\"100%\" border=\"0\"><tr>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</tr></table>\r\n<hr />\r\n\r\n<a name=\"class_details\"></a>\r\n<h3>Class Details</h3>\r\n<div class=\"tags\">\r\n[line 75]<br />\r\n<strong>Multi-layer Neural Network in PHP</strong><br /><br /><p>Loosely based on source code by <a href=\"http://www.philbrierley.com\">Phil Brierley</a>,  that was translated into PHP by 'dspink' in sep 2005</p><p>Algorithm was obtained from the excellent introductory book  &quot;<a href=\"http://www.amazon.com/link/dp/0321204662\">Artificial Intelligence - a guide to intelligent systems</a>&quot;  by Michael Negnevitsky (ISBN 0-201-71159-1)</p><p><strong>Example: learning the 'XOR'-function</strong>  <ol><li><div class=\"src-line\">&nbsp;<span class=\"src-inc\">require_once</span><span class=\"src-sym\">(</span><span class=\"src-str\">&quot;class_neuralnetwork.php&quot;</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;Create&nbsp;a&nbsp;new&nbsp;neural&nbsp;network&nbsp;with&nbsp;3&nbsp;input&nbsp;neurons,</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;4&nbsp;hidden&nbsp;neurons,&nbsp;and&nbsp;1&nbsp;output&nbsp;neuron</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$n&nbsp;</span>=&nbsp;<span class=\"src-key\">new&nbsp;</span><a href=\"#methodNeuralNetwork\">NeuralNetwork</a><span class=\"src-sym\">(</span><span class=\"src-num\">3</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">4</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodsetVerbose\">setVerbose</a><span class=\"src-sym\">(</span><span class=\"src-id\">false</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;Add&nbsp;test-data&nbsp;to&nbsp;the&nbsp;network.&nbsp;In&nbsp;this&nbsp;case,</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;we&nbsp;want&nbsp;the&nbsp;network&nbsp;to&nbsp;learn&nbsp;the&nbsp;'XOR'-function.</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;The&nbsp;third&nbsp;input-parameter&nbsp;is&nbsp;the&nbsp;'bias'.</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodaddTestData\">addTestData</a><span class=\"src-sym\">(&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">)</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">))</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodaddTestData\">addTestData</a><span class=\"src-sym\">(&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">)</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">))</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodaddTestData\">addTestData</a><span class=\"src-sym\">(&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">)</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">))</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodaddTestData\">addTestData</a><span class=\"src-sym\">(&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">)</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-key\">array&nbsp;</span><span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">))</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;we&nbsp;try&nbsp;training&nbsp;the&nbsp;network&nbsp;for&nbsp;at&nbsp;most&nbsp;$max&nbsp;times</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$max&nbsp;</span>=&nbsp;<span class=\"src-num\">3</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;train&nbsp;the&nbsp;network&nbsp;in&nbsp;max&nbsp;1000&nbsp;epochs,&nbsp;with&nbsp;a&nbsp;max&nbsp;squared&nbsp;error&nbsp;of&nbsp;0.01</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-key\">while&nbsp;</span><span class=\"src-sym\">(</span><span class=\"src-sym\">!</span><span class=\"src-sym\">(</span><span class=\"src-var\">$success</span>=<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodtrain\">train</a><span class=\"src-sym\">(</span><span class=\"src-num\">1000</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">0.01</span><span class=\"src-sym\">))&nbsp;</span>&amp;&amp;&nbsp;<span class=\"src-var\">$max</span>--&gt;<span class=\"src-num\">0</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-sym\">{</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-comm\">//&nbsp;training&nbsp;failed:</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-comm\">//&nbsp;1.&nbsp;re-initialize&nbsp;the&nbsp;weights&nbsp;in&nbsp;the&nbsp;network</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><span class=\"src-id\">initWeights</span><span class=\"src-sym\">(</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-comm\">//&nbsp;2.&nbsp;display&nbsp;message</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<span class=\"src-str\">&quot;Nothing&nbsp;found...&lt;hr&nbsp;/&gt;&quot;</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-sym\">}</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;print&nbsp;a&nbsp;message&nbsp;if&nbsp;the&nbsp;network&nbsp;was&nbsp;succesfully&nbsp;trained</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-key\">if&nbsp;</span><span class=\"src-sym\">(</span><span class=\"src-var\">$success</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-sym\">{</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-var\">$epochs&nbsp;</span>=&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><span class=\"src-id\">getEpoch</span><span class=\"src-sym\">(</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<span class=\"src-str\">&quot;</span><span class=\"src-str\"><span class=\"src-id\">Success</span>&nbsp;<span class=\"src-id\">in</span>&nbsp;<span class=\"src-var\">$epochs</span>&nbsp;<span class=\"src-id\">training</span>&nbsp;<span class=\"src-id\">rounds</span>!&lt;<span class=\"src-id\">hr</span>&nbsp;/&gt;</span><span class=\"src-str\">&quot;</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-sym\">}</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;in&nbsp;any&nbsp;case,&nbsp;we&nbsp;print&nbsp;the&nbsp;output&nbsp;of&nbsp;the&nbsp;neural&nbsp;network</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-key\">for&nbsp;</span><span class=\"src-sym\">(</span><span class=\"src-var\">$i&nbsp;</span>=&nbsp;<span class=\"src-num\">0</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-var\">$i&nbsp;</span>&lt;&nbsp;<a href=\"http://www.php.net/count\">count</a><span class=\"src-sym\">(</span><span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><span class=\"src-id\">trainInputs</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-var\">$i&nbsp;</span>++<span class=\"src-sym\">)&nbsp;</span><span class=\"src-sym\">{</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"src-var\">$output&nbsp;</span>=&nbsp;<span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><a href=\"#methodcalculate\">calculate</a><span class=\"src-sym\">(</span><span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><span class=\"src-id\">trainInputs</span><span class=\"src-sym\">[</span><span class=\"src-var\">$i</span><span class=\"src-sym\">]</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;<span class=\"src-str\">&quot;</span><span class=\"src-str\">&lt;<span class=\"src-id\">br</span>&nbsp;/&gt;<span class=\"src-id\">Testset</span>&nbsp;<span class=\"src-var\">$i</span>;&nbsp;</span><span class=\"src-str\">&quot;</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;<span class=\"src-str\">&quot;expected&nbsp;output&nbsp;=&nbsp;(&quot;</span>.<a href=\"http://www.php.net/implode\">implode</a><span class=\"src-sym\">(</span><span class=\"src-str\">&quot;,&nbsp;&quot;</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-var\">$n</span><span class=\"src-sym\">-&gt;</span><span class=\"src-id\">trainOutput</span><span class=\"src-sym\">[</span><span class=\"src-var\">$i</span><span class=\"src-sym\">]</span><span class=\"src-sym\">)</span>.<span class=\"src-str\">&quot;)&nbsp;&quot;</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;<span class=\"src-str\">&quot;output&nbsp;from&nbsp;neural&nbsp;network&nbsp;=&nbsp;(&quot;</span>.<a href=\"http://www.php.net/implode\">implode</a><span class=\"src-sym\">(</span><span class=\"src-str\">&quot;,&nbsp;&quot;</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-var\">$output</span><span class=\"src-sym\">)</span>.<span class=\"src-str\">&quot;)\\n&quot;</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-sym\">}</span></div></li>\r\n</ol></p><p>The resulting output could for example be something along the following lines:</p><p><ol><li><div class=\"src-line\">&nbsp;<span class=\"src-id\">Success&nbsp;in&nbsp;</span><span class=\"src-num\">719&nbsp;</span><span class=\"src-id\">training&nbsp;rounds</span><span class=\"src-sym\">!</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-id\">Testset&nbsp;</span><span class=\"src-num\">0</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-id\">expected&nbsp;output&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-id\">output&nbsp;from&nbsp;neural&nbsp;network&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span>-<span class=\"src-num\">0.986415991978</span><span class=\"src-sym\">)</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-id\">Testset&nbsp;</span><span class=\"src-num\">1</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-id\">expected&nbsp;output&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span><span class=\"src-num\">1</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-id\">output&nbsp;from&nbsp;neural&nbsp;network&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span><span class=\"src-num\">0.992121412998</span><span class=\"src-sym\">)</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-id\">Testset&nbsp;</span><span class=\"src-num\">2</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-id\">expected&nbsp;output&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span><span class=\"src-num\">1</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-id\">output&nbsp;from&nbsp;neural&nbsp;network&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span><span class=\"src-num\">0.992469534962</span><span class=\"src-sym\">)</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-id\">Testset&nbsp;</span><span class=\"src-num\">3</span><span class=\"src-sym\">;&nbsp;</span><span class=\"src-id\">expected&nbsp;output&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span>-<span class=\"src-num\">1</span><span class=\"src-sym\">)&nbsp;</span><span class=\"src-id\">output&nbsp;from&nbsp;neural&nbsp;network&nbsp;</span>=&nbsp;<span class=\"src-sym\">(</span>-<span class=\"src-num\">0.990224120384</span><span class=\"src-sym\">)</span></div></li>\r\n</ol></p><p>...which indicates the network has learned the task.</p><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>version:</b>&nbsp;&nbsp;</td><td>1.0</td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>since:</b>&nbsp;&nbsp;</td><td>feb 2007</td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>author:</b>&nbsp;&nbsp;</td><td>E. Akerboom</td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>author:</b>&nbsp;&nbsp;</td><td><a href=\"http://www.tremani.nl/\">Tremani</a>, <a href=\"http://maps.google.com/maps?f=q&hl=en&q=delft%2C+the+netherlands&ie=UTF8&t=k&om=1&ll=53.014783%2C4.921875&spn=36.882665%2C110.566406&z=4\">Delft</a></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>license:</b>&nbsp;&nbsp;</td><td><a href=\"http://opensource.org/licenses/bsd-license.php\">BSD License</a></td>\r\n  </tr>\r\n</table>\r\n</div>\r\n</div><br /><br />\r\n<div class=\"top\">[ <a href=\"#top\">Top</a> ]</div><br />\r\n\r\n\r\n<hr />\r\n<a name=\"class_methods\"></a>\r\n<h3>Class Methods</h3>\r\n<div class=\"tags\">\r\n\r\n  <hr />\r\n\t<a name=\"methodNeuralNetwork\"></a>\r\n\t<h3>constructor NeuralNetwork <span class=\"smalllinenumber\">[line 124]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>NeuralNetwork NeuralNetwork(\r\narray\r\n$nodecount)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tCreates a neural network.<br /><br /><p>Example:  <ol><li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;create&nbsp;a&nbsp;network&nbsp;with&nbsp;4&nbsp;input&nbsp;nodes,&nbsp;10&nbsp;hidden&nbsp;nodes,&nbsp;and&nbsp;4&nbsp;output&nbsp;nodes</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$n&nbsp;</span>=&nbsp;<span class=\"src-key\">new&nbsp;</span><a href=\"#methodNeuralNetwork\">NeuralNetwork</a><span class=\"src-sym\">(</span><span class=\"src-num\">4</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">10</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">4</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;create&nbsp;a&nbsp;network&nbsp;with&nbsp;4&nbsp;input&nbsp;nodes,&nbsp;1&nbsp;hidden&nbsp;layer&nbsp;with&nbsp;10&nbsp;nodes,</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;another&nbsp;hidden&nbsp;layer&nbsp;with&nbsp;10&nbsp;nodes,&nbsp;and&nbsp;4&nbsp;output&nbsp;nodes</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$n&nbsp;</span>=&nbsp;<span class=\"src-key\">new&nbsp;</span><a href=\"#methodNeuralNetwork\">NeuralNetwork</a><span class=\"src-sym\">(</span><span class=\"src-num\">4</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">10</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">10</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">4</span><span class=\"src-sym\">)</span><span class=\"src-sym\">;</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;</div></li>\r\n<li><div class=\"src-line\">&nbsp;<span class=\"src-comm\">//&nbsp;alternative&nbsp;syntax</span></div></li>\r\n<li><div class=\"src-line\">&nbsp;&nbsp;<span class=\"src-var\">$n&nbsp;</span>=&nbsp;<span class=\"src-key\">new&nbsp;</span><a href=\"#methodNeuralNetwork\">NeuralNetwork</a><span class=\"src-sym\">(</span><span class=\"src-key\">array</span><span class=\"src-sym\">(</span><span class=\"src-num\">4</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">10</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">10</span><span class=\"src-sym\">,&nbsp;</span><span class=\"src-num\">4</span><span class=\"src-sym\">))</span><span class=\"src-sym\">;</span></div></li>\r\n</ol></p><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$nodecount</b>&nbsp;&nbsp;</td>\r\n        <td>The number of nodes in the consecutive layers.</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodactivation\"></a>\r\n\t<h3>method activation <span class=\"smalllinenumber\">[line 234]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>float activation(\r\nfloat\r\n$value)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tImplements the standard (default) activation function for backpropagation networks,  the 'tanh' activation function.<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>The final output of the node</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">float&nbsp;&nbsp;</td>\r\n        <td><b>$value</b>&nbsp;&nbsp;</td>\r\n        <td>The preliminary output to apply this function to</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodaddControlData\"></a>\r\n\t<h3>method addControlData <span class=\"smalllinenumber\">[line 294]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void addControlData(\r\narray\r\n$input, array\r\n$output, [int\r\n$id = null])</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tAdd a set of control data to the network.<br /><br /><p>This set of data is used to prevent 'overlearning' of the network. The  network will stop training if the results obtained for the control data  are worsening.</p><p>The data added as control data is not used for training.</p><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$input</b>&nbsp;&nbsp;</td>\r\n        <td>An input vector</td>\r\n      </tr>\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$output</b>&nbsp;&nbsp;</td>\r\n        <td>The corresponding output</td>\r\n      </tr>\r\n          <tr>\r\n        <td class=\"type\">int&nbsp;&nbsp;</td>\r\n        <td><b>$id</b>&nbsp;&nbsp;</td>\r\n        <td>(optional) An identifier for this piece of data</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodaddTestData\"></a>\r\n\t<h3>method addTestData <span class=\"smalllinenumber\">[line 259]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void addTestData(\r\narray\r\n$input, array\r\n$output, [int\r\n$id = null])</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tAdd a test vector and its output<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$input</b>&nbsp;&nbsp;</td>\r\n        <td>An input vector</td>\r\n      </tr>\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$output</b>&nbsp;&nbsp;</td>\r\n        <td>The corresponding output</td>\r\n      </tr>\r\n          <tr>\r\n        <td class=\"type\">int&nbsp;&nbsp;</td>\r\n        <td><b>$id</b>&nbsp;&nbsp;</td>\r\n        <td>(optional) An identifier for this piece of data</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodcalculate\"></a>\r\n\t<h3>method calculate <span class=\"smalllinenumber\">[line 187]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>mixed calculate(\r\narray\r\n$input)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tCalculate the output of the neural network for a given input vector<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>The output of the network</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$input</b>&nbsp;&nbsp;</td>\r\n        <td>The vector to calculate</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodderivative_activation\"></a>\r\n\t<h3>method derivative_activation <span class=\"smalllinenumber\">[line 246]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>$float derivative_activation(\r\nfloat\r\n$value)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tImplements the derivative of the activation function. By default, this is the  inverse of the 'tanh' activation function: 1.0 - tanh($value)*tanh($value);<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">float&nbsp;&nbsp;</td>\r\n        <td><b>$value</b>&nbsp;&nbsp;</td>\r\n        <td>'X'</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodgetControlDataIDs\"></a>\r\n\t<h3>method getControlDataIDs <span class=\"smalllinenumber\">[line 313]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>array getControlDataIDs(\r\n)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tReturns the identifiers of the control data used during the training  of the network (if available)<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>An array of identifiers</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodgetLearningRate\"></a>\r\n\t<h3>method getLearningRate <span class=\"smalllinenumber\">[line 155]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>float getLearningRate(\r\nint\r\n$layer)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tGets the learning rate for a specific layer<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>The learning rate for that layer</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">int&nbsp;&nbsp;</td>\r\n        <td><b>$layer</b>&nbsp;&nbsp;</td>\r\n        <td>The layer to obtain the learning rate for</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodgetMomentum\"></a>\r\n\t<h3>method getMomentum <span class=\"smalllinenumber\">[line 177]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>float getMomentum(\r\n)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tGets the momentum.<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>The momentum</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodgetRandomWeight\"></a>\r\n\t<h3>method getRandomWeight <span class=\"smalllinenumber\">[line 647]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>float getRandomWeight(\r\n\r\n$layer)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tGets a random weight between [-0.25 .. 0.25]. Used to initialize the network.<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>A random weight</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">&nbsp;&nbsp;</td>\r\n        <td><b>$layer</b>&nbsp;&nbsp;</td>\r\n        <td></td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodgetTestDataIDs\"></a>\r\n\t<h3>method getTestDataIDs <span class=\"smalllinenumber\">[line 277]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>array getTestDataIDs(\r\n)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tReturns the identifiers of the data used to train the network (if available)<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>An array of identifiers</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodisVerbose\"></a>\r\n\t<h3>method isVerbose <span class=\"smalllinenumber\">[line 344]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>boolean isVerbose(\r\n)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tReturns whether or not the network displays status and error messages.<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>'true' if status and error messages are displayed, 'false' otherwise</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodload\"></a>\r\n\t<h3>method load <span class=\"smalllinenumber\">[line 355]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>boolean load(\r\nstring\r\n$filename)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tLoads a neural network from a file saved by the 'save()' function. Clears  the training and control data added so far.<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>'true' on success, 'false' otherwise</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">string&nbsp;&nbsp;</td>\r\n        <td><b>$filename</b>&nbsp;&nbsp;</td>\r\n        <td>The filename to load the network from</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodsave\"></a>\r\n\t<h3>method save <span class=\"smalllinenumber\">[line 399]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>boolean save(\r\nstring\r\n$filename)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tSaves a neural network to a file<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>'true' on success, 'false' otherwise</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">string&nbsp;&nbsp;</td>\r\n        <td><b>$filename</b>&nbsp;&nbsp;</td>\r\n        <td>The filename to save the neural network to</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodsetLearningRate\"></a>\r\n\t<h3>method setLearningRate <span class=\"smalllinenumber\">[line 141]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void setLearningRate(\r\narray\r\n$learningrate)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tSets the learning rate between the different layers.<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">array&nbsp;&nbsp;</td>\r\n        <td><b>$learningrate</b>&nbsp;&nbsp;</td>\r\n        <td>An array containing the learning rates [range 0.0 - 1.0].  The size of this array is 'layercount - 1'. You might also provide a single number. If that is  the case, then this will be the learning rate for the whole network.</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodsetMomentum\"></a>\r\n\t<h3>method setMomentum <span class=\"smalllinenumber\">[line 168]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void setMomentum(\r\nfloat\r\n$momentum)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tSets the 'momentum' for the learning algorithm. The momentum should  accelerate the learning process and help avoid local minima.<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">float&nbsp;&nbsp;</td>\r\n        <td><b>$momentum</b>&nbsp;&nbsp;</td>\r\n        <td>The momentum. Must be between 0.0 and 1.0; Usually between 0.5 and 0.9</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodsetVerbose\"></a>\r\n\t<h3>method setVerbose <span class=\"smalllinenumber\">[line 335]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void setVerbose(\r\nboolean\r\n$is_verbose)</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tDetermines if the neural network displays status and error messages. By default, it does.<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">boolean&nbsp;&nbsp;</td>\r\n        <td><b>$is_verbose</b>&nbsp;&nbsp;</td>\r\n        <td>'true' if you want to display status and error messages, 'false' if you don't</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodshowWeights\"></a>\r\n\t<h3>method showWeights <span class=\"smalllinenumber\">[line 322]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>void showWeights(\r\n[boolean\r\n$force = false])</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tShows the current weights and thresholds<br /><br /><br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">boolean&nbsp;&nbsp;</td>\r\n        <td><b>$force</b>&nbsp;&nbsp;</td>\r\n        <td>Force the output, even if the network is <a href=\"#methodsetVerbose\">not verbose</a>.</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n  <hr />\r\n\t<a name=\"methodtrain\"></a>\r\n\t<h3>method train <span class=\"smalllinenumber\">[line 424]</span></h3>\r\n\t<div class=\"function\">\r\n    <table width=\"90%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td class=\"code_border\">\r\n    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><td class=\"code\">\r\n\t\t<code>bool train(\r\n[int\r\n$maxEpochs = 500], [float\r\n$maxError = 0.01])</code>\r\n    </td></tr></table>\r\n    </td></tr></table><br />\r\n\t\r\n\t\tStart the training process<br /><br /><br /><br />\r\n<h4>Tags:</h4>\r\n<div class=\"tags\">\r\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td><b>return:</b>&nbsp;&nbsp;</td><td>'true' if the training was successful, 'false' otherwise</td>\r\n  </tr>\r\n</table>\r\n</div>\r\n<br /><br />\r\n\r\n\t\r\n        <h4>Parameters:</h4>\r\n    <div class=\"tags\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n        <td class=\"type\">int&nbsp;&nbsp;</td>\r\n        <td><b>$maxEpochs</b>&nbsp;&nbsp;</td>\r\n        <td>The maximum number of epochs</td>\r\n      </tr>\r\n          <tr>\r\n        <td class=\"type\">float&nbsp;&nbsp;</td>\r\n        <td><b>$maxError</b>&nbsp;&nbsp;</td>\r\n        <td>The maximum squared error in the training data</td>\r\n      </tr>\r\n        </table>\r\n    </div><br />\r\n        <div class=\"top\">[ <a href=\"#top\">Top</a> ]</div>\r\n  </div>\r\n</div><br />\r\n\r\n\r\n        <div class=\"credit\">\r\n\t\t    <hr />\r\n\t\t    Documentation generated by <a href=\"http://www.phpdoc.org\">phpDocumentor 1.3.1</a>\r\n\t      </div>\r\n      </td></tr></table>\r\n\r\n</body>\r\n</html>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}